{"version":3,"sources":["styles/index.js","utils/API.js","components/SearchForm.js","components/DayCard.js","components/DayDetails.js","App.js","serviceWorker.js","index.js"],"names":["teal","outline","tealOutline","Wrapper","styled","Container","FormWrapper","Form","DayWrapper","section","props","isSelected","DetailsWrapper","Card","location","axios","get","process","then","res","data","results","length","alert","geometry","lat","lon","lng","catch","err","console","log","SearchForm","searchTerm","handleInputChange","handleFormSubmit","inline","onSubmit","FormGroup","Label","for","hidden","Input","type","name","id","placeholder","value","onChange","Button","onClick","DayCard","Col","selectDay","CardHeader","day","CardBody","temp","toFixed","src","icon","alt","description","high","low","precip","DayDetails","appHigh","appLow","humidity","windSpeed","windDir","toUpperCase","substring","App","useState","selectedDay","days","setData","useEffect","getWeather","document","title","API","city_name","state_code","Row","md","e","target","preventDefault","map","key","ts","moment","valid_date","format","high_temp","low_temp","weather","pop","className","role","app_max_temp","app_min_temp","rh","wind_spd","wind_cdir_full","Boolean","window","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.129d395d.chunk.js","sourcesContent":["import styled from \"styled-components\";\nimport { Container, Form, Card } from \"reactstrap\";\n\nconst gray = \"#ccc\";\nconst teal = \"#008080\";\nconst outline = `2px solid ${gray}`;\nconst tealOutline = `2px solid ${teal}`;\n\nexport const Wrapper = styled(Container)`\n    h1 {\n        font-size: 2.25rem;\n        font-weight: 700;\n    }\n    h3 {\n        font-weight: 700;\n    }\n    .row {\n        margin-bottom: 1rem;\n        :first-child {\n            align-items: center;\n            margin-top: .75rem;\n        }\n        :last-child {\n            margin-bottom: 2rem;\n        }\n    }\n    .loading-spinner {\n        justify-content: center;\n        margin: 5rem 0;\n        width: 100%;\n    }\n    .spinner-border {\n        border-color: ${teal};\n        border-right-color: transparent;\n    }\n\n`\n\nexport const FormWrapper = styled(Form)`\n    justify-content: flex-end;\n    input.form-control {\n        border-color: ${gray};\n        border-radius: .25rem 0 0 .25rem;\n        border-right-width: 0;\n        width: 350px;\n    }\n    button {\n        background: ${teal};\n        border-radius: 0 .25rem .25rem 0;\n        font-weight: 700;\n    }\n`\n\nexport const DayWrapper = styled.section`\n    text-align: center;\n    :hover {\n        cursor: pointer;\n        .card {\n            border-color: ${teal};\n        }\n    }\n    h3 {\n        font-weight: 700;\n    }\n    img {\n        width: 80px;\n    }\n    .card {\n        border: ${props => props.isSelected ? tealOutline : outline};\n    }\n    .card-header {\n        background: ${props => props.isSelected ? teal : null};\n        border-bottom: ${props => props.isSelected ? tealOutline : outline};\n        color: ${props => props.isSelected ? \"#fff\" : null};\n        font-weight: 700;\n    }\n    .card-body {\n        padding: 1.25rem .75rem;\n    }\n`\n\nexport const DetailsWrapper = styled(Card)`\n    border: ${tealOutline};\n    padding: 1.5rem;\n    text-align: center;\n    h2 {\n        font-weight: 700;\n    }\n    h3 {\n        font-size: 3rem;\n        font-weight: 700;\n        margin-top: .5rem;\n    }\n    img {\n        align-self: center;\n        width: 150px;\n    }\n\n`","import axios from \"axios\";\nconst googleKey = process.env.REACT_APP_GOOGLE_KEY;\nconst weatherbitKey = process.env.REACT_APP_WEATHERBIT_KEY;\n\nexport default {\n    getWeather: function(location) {\n        return axios.get(`https://maps.googleapis.com/maps/api/geocode/json?address=${location}&key=${googleKey}`)\n            .then(res => {\n                if (!res.data.results.length) {\n                    return alert(\"Not a valid location!\");\n                }\n\n                const { lat, lng: lon } = res.data.results[0].geometry.location;\n                return axios.get(`https://api.weatherbit.io/v2.0/forecast/daily?lat=${lat}&lon=${lon}&units=I&days=7&key=${weatherbitKey}`);\n\n\n            })\n            .catch(err => {\n                console.log(err);\n            })\n    }\n}","import React from \"react\";\nimport { FormGroup, Label, Input, Button } from \"reactstrap\";\nimport { FormWrapper } from \"../styles\";\n\nconst SearchForm = ({ searchTerm, handleInputChange, handleFormSubmit }) => {\n    return (\n        <FormWrapper inline onSubmit={handleFormSubmit}>\n            <FormGroup>\n                <Label for=\"searchTerm\" hidden>Search by Location:</Label>\n                <Input \n                    type=\"text\" \n                    name=\"searchTerm\" \n                    id=\"searchTerm\" \n                    placeholder=\"Devils Tower OR 10014 OR Denver, CO\" \n                    value={searchTerm}\n                    onChange={handleInputChange}\n                />\n            </FormGroup>\n            <Button onClick={handleFormSubmit}>Search</Button>\n        </FormWrapper>\n    );\n}\n\nexport default SearchForm;","import React from \"react\";\nimport { Col, Card, CardHeader, CardBody } from \"reactstrap\";\nimport { DayWrapper } from \"../styles\";\n\nconst DayCard = props => {\n    return (\n        <Col>\n            <DayWrapper isSelected={props.isSelected} onClick={props.selectDay}>\n                <Card>\n                    <CardHeader>{props.day}</CardHeader>\n                    <CardBody>\n                        <h3>{props.temp.toFixed(1)}Â°</h3>\n                        <img src={`${process.env.PUBLIC_URL}/icons/${props.icon}.png`} alt={props.description} />\n                        <p><strong>High:</strong> {props.high.toFixed(1)}Â°</p>\n                        <p><strong>Low:</strong> {props.low.toFixed(1)}Â°</p>\n                        <p><strong>Precip:</strong> {props.precip}%</p>\n                    </CardBody>\n                </Card>\n            </DayWrapper>\n        </Col>\n    )\n}\n\nexport default DayCard;","import React from \"react\";\nimport { DetailsWrapper } from \"../styles\";\n\nconst DayDetails = props => {\n    return (\n        <DetailsWrapper>\n            <h2>Day Details for {props.day}:</h2>\n            <h3>{props.temp.toFixed(1)}Â°</h3>\n            <img src={`${process.env.PUBLIC_URL}/icons/${props.icon}.png`} alt={props.description} />\n            <p><em>{props.description}</em></p>\n            <p><strong>High:</strong> {props.high.toFixed(1)}Â° | <strong>Feels Like:</strong> {props.appHigh.toFixed(1)}Â°</p>\n            <p><strong>Low:</strong> {props.low.toFixed(1)}Â° | <strong>Feels Like:</strong> {props.appLow.toFixed(1)}Â°</p>\n            <p><strong>Likelihood of Precipitation:</strong> {props.precip}% | <strong>Relative Humidity:</strong> {props.humidity}%</p>\n            <p><strong>Wind Speed:</strong> {(props.windSpeed *  2.237).toFixed(2)}mph | <strong>Wind Direction:</strong> {props.windDir[0].toUpperCase() + props.windDir.substring(1)}</p>\n        </DetailsWrapper>\n    )\n}\n\nexport default DayDetails;","// destructure useState and useEffect from React to give us state/lifecycle functionality!\nimport React, { useState, useEffect } from \"react\";\nimport moment from \"moment\";\nimport { Row, Col } from \"reactstrap\";\nimport { Wrapper } from \"./styles\";\nimport API from \"./utils/API\";\nimport SearchForm from \"./components/SearchForm\";\nimport DayCard from \"./components/DayCard\";\nimport DayDetails from \"./components/DayDetails\";\n// import weatherData from \"./data/sample.json\"; // only used initially until we wired up with the API\n\nconst App = () => {\n  // the following variable (data) instantiates four values in state using Hooks... note the \n  // const name is an array destructured into two variables that we can name according to their \n  // purpose -- the first array member is ALWAYS the value stored in state, and the second \n  // array member is ALWAYS the function created to set/alter the state value; after the equal sign, \n  // 'useState()' indicates that we're using React's useState functionality... the value inside the \n  // function call parens indicates the initial value of the state in question!\n\n  // in this example here, we're storing an object of values in state, which is useful if the\n  // included values are often or always updated together; one caution storing objects in state:\n  // the useState() Hook does not merge in your provided key value pairs into the existing\n  // state object like it did in this.setState()... instead, it overwrites everything in that\n  // location; it is common to use the spread operator to spread in the previous state values\n  // (in this case, 'data') and then to add your updated key/val pairs afterwards\nconst [data, setData] = useState({\n    searchTerm: \"\",\n    selectedDay: null,\n    location: \"\",\n    days: []\n});\n  // destructuring the values in our 'data' state into individual variables\nconst { searchTerm, selectedDay, location, days } = data;\n\n  // here 'useEffect' coupled with [] as a second arg behaves like componentDidMount did in a \n  // class-based component; it will only run once right after the initial render\nuseEffect(() => {\n    getWeather(\"Denver, CO\");\n}, []);\n\n  // here we use 'useEffect' again (it's fairly common to have multiple useEffect blocks\n  // when you want each separate instance to be triggered at different times in the lifecycle)...\n  // in this case, we are setting the document's title on initial render AND anytime the state\n  // value of 'location' changes... the array following the anonymous function (the dependency\n  // or 'deps' array) specifies which values should trigger the effect upon change\nuseEffect(() => {\n    document.title = `${location ? \"Weather Info for \" + location : \"Find weather by location\"}`;\n}, [location]);\n\n  // since these functions are built inside a function-based (dumb) component, we typically create\n  // them as const function expressions, like we have here\nconst getWeather = location => {\n    if (!location) {\n        return alert(\"Enter a location to get weather data!\");\n    }\n\n    API.getWeather(location)\n        .then(res => {\n            if (!res) return;\n            setData({\n                searchTerm: \"\",\n                selectedDay: null,\n                location: `${res.data.city_name}, ${res.data.state_code}`,\n                days: res.data.data\n            });\n        })\n        .catch(err => console.log(err));\n}\n\nconst handleInputChange = e => {\n    const { name, value } = e.target;\n    setData({ ...data, [name]: value });\n}\n\nconst handleFormSubmit = e => {\n    e.preventDefault();\n    getWeather(searchTerm);\n}\n\n  // since we're in a function and not a class, there's no need to wrap in a 'render()' lifecycle method!\nreturn (\n    <Wrapper>\n        <Row>\n            <Col md={7}>\n                <h1>{location\n                    ? \"Weather Info for \" + location + \":\"\n                    : \"Search by Location:\"}\n                </h1>\n            </Col>\n            <Col md={5}>\n                <SearchForm\n                    searchTerm={searchTerm}\n                    handleInputChange={handleInputChange}\n                    handleFormSubmit={handleFormSubmit}\n                />\n            </Col>\n        </Row>\n        <Row>\n            {days.length ? (\n                <>\n                    {days.map(day => (\n                        <DayCard\n                            key={day.ts}\n                            day={moment(day.valid_date, \"YYYY-MM-DD\").format(\"dddd\")}\n                            temp={day.temp}\n                            high={day.high_temp}\n                            low={day.low_temp}\n                            icon={day.weather.icon}\n                            description={day.weather.description}\n                            precip={day.pop}\n                            isSelected={day === selectedDay}\n                            selectDay={() => setData({ ...data, selectedDay: day })}\n                        />\n                    ))}\n                </>\n            ) : (\n                <div className=\"d-flex loading-spinner\">\n                    <div className=\"spinner-border\" role=\"status\">\n                        <span className=\"sr-only\">Loading...</span>\n                    </div>\n                </div>\n            )}\n        </Row>\n        <Row>\n            <Col>\n                {selectedDay ? (\n                    <DayDetails\n                        day={moment(selectedDay.valid_date, \"YYYY-MM-DD\").format(\"dddd, MMMM Do, YYYY\")}\n                        temp={selectedDay.temp}\n                        high={selectedDay.high_temp}\n                        appHigh={selectedDay.app_max_temp}\n                        low={selectedDay.low_temp}\n                        appLow={selectedDay.app_min_temp}\n                        icon={selectedDay.weather.icon}\n                        description={selectedDay.weather.description}\n                        precip={selectedDay.pop}\n                        humidity={selectedDay.rh}\n                        windSpeed={selectedDay.wind_spd}\n                        windDir={selectedDay.wind_cdir_full}\n                    />\n                ) : (\n                <h3>{days.length ? \"Click on a day above to view details!\" : null}</h3>\n                )}\n            </Col>\n        </Row>\n    </Wrapper>\n);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}